// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String  @id @default(uuid())
  username  String  @unique
  email     String  @unique
  password  String
  balance   Float   @default(0.0)
  bets      Bet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transaction Transaction[]

  Notification Notification[]
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  category    String
  status      EventStatus @default(OPEN)
  options     Option[]
  bets        Bet[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum EventStatus {
  OPEN
  CLOSED
  SETTLED
}
model Option {
  id        String   @id @default(uuid())
  name      String
  odds      Float
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())

  Bet Bet[]
}
model Bet {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  option    Option   @relation(fields: [optionId], references: [id])
  optionId  String
  amount    Float
  status    BetStatus @default(PENDING)
  payout    Float?
  createdAt DateTime  @default(now())
}

enum BetStatus {
  PENDING
  WON
  LOST
}
model Transaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      TransactionType
  amount    Float
  status    TransactionStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET_PLACEMENT
  BET_WIN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
model Admin {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  role     AdminRole @default(MODERATOR)
}

enum AdminRole {
  MODERATOR
  SUPERADMIN
}
model Notification {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean @default(false)
  createdAt DateTime @default(now())
}
